<?xml version="1.0"?>

<project basedir="." name="portal-test-elasticsearch" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="prepare-elasticsearch">
		<sequential>
			<chmod file="${elasticsearch.dir}/bin/**" perm="a+x" />

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}"
						src="${elasticsearch.analysis-icu.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}"
						src="${elasticsearch.analysis-kuromoji.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}"
						src="${elasticsearch.analysis-smartcn.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}"
						src="${elasticsearch.analysis-stempel.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.license.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.license.zip.name}"
						src="${elasticsearch.license.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name},${elasticsearch.license.zip.name}" param="elasticsearch.plugin.name" >
						<sequential>
							<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
								<arg value="-c" />
								<arg value="./plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
							</exec>
						</sequential>
					</for>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name},${elasticsearch.license.zip.name}" param="elasticsearch.plugin.name" >
							<sequential>
								<exec dir="${elasticsearch.dir}/bin" executable="cmd">
									<arg value="/c" />
									<arg value="plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
								</exec>
							</sequential>
						</for>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-kibana">
		<sequential>
			<if>
				<not>
					<available file="${elasticsearch.dir}/${elastic.marvel.tar.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elastic.marvel.tar.name}"
						src="${elastic.marvel.tar.url}"
						verbose="true"
					/>
				</then>
			</if>

			<chmod file="${elastic.kibana.dir}/bin/**" perm="a+x" />

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./kibana plugin --install marvel --url file:///${elasticsearch.dir}/${elastic.marvel.tar.name}" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elastic.kibana.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="kibana plugin --install marvel --url file:///${elasticsearch.dir}/${elastic.marvel.tar.name}" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-marvel-agent">
		<sequential>
			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.marvel-agent.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.marvel-agent.zip.name}"
						src="${elasticsearch.marvel-agent.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./plugin install file:///${elasticsearch.dir}/${elasticsearch.marvel-agent.zip.name}" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="plugin install file:///${elasticsearch.dir}/${elasticsearch.marvel-agent.zip.name}" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-shield">
		<sequential>
			<if>
				<not>
					<available file="${elasticsearch.dir}/${elastic.shield.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elastic.shield.zip.name}"
						src="${elastic.shield.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./plugin install file:///${elasticsearch.dir}/${elastic.shield.zip.name}" />
					</exec>

					<exec dir="${elasticsearch.dir}/bin/shield" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./esusers useradd liferay -p liferay -r admin" />
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="unzip-elasticsearch">
		<sequential>
			<delete dir="${elasticsearch.dir}" />

			<if>
				<not>
					<available file="${app.server.parent.dir}/${elasticsearch.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${app.server.parent.dir}/${elasticsearch.zip.name}"
						src="${elasticsearch.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<unzip
				dest="${app.server.parent.dir}"
				src="${app.server.parent.dir}/${elasticsearch.zip.name}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="unzip-kibana">
		<sequential>
			<delete file="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}" />

			<delete file="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}" />

			<delete file="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}" />

			<if>
				<and>
					<not>
						<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}" />
					</not>
					<os family="mac" />
				</and>
				<then>
					<mirrors-get
						dest="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}"
						src="${elastic.kibana.tar.url.mac}"
						verbose="true"
					/>

					<exec dir="${app.server.parent.dir}" executable="/bin/bash">
						<arg value="-c" />
						<arg value="tar -zxf ${elastic.kibana.tar.name.mac}" />
					</exec>
				</then>
				<elseif>
					<and>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}" />
						</not>
						<os family="unix" />
					</and>
					<then>
						<mirrors-get
							dest="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
							src="${elastic.kibana.tar.url.linux}"
							verbose="true"
						/>

						<untar
							compression="gzip"
							dest="${app.server.parent.dir}"
							src="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.zip.name}" />
						</not>
						<os family="windows" />
					</and>
					<then>
						<mirrors-get
							dest="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
							src="${elastic.kibana.zip.url.windows}"
							verbose="true"
						/>

						<unzip
							dest="${app.server.parent.dir}"
							src="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
						/>
					</then>
				</elseif>
			</if>

			<delete dir="${elastic.kibana.dir}" />

			<if>
				<os family="mac" />
				<then>
					<move file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-darwin-x86_64" tofile="${elastic.kibana.dir}" />
				</then>
				<elseif>
					<os family="unix" />
					<then>
						<move file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-linux-x86_64" tofile="${elastic.kibana.dir}" />
					</then>
				</elseif>
				<elseif>
					<os family="windows" />
					<then>
						<move file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-windows-x86" tofile="${elastic.kibana.dir}" />
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<target name="configure-elasticsearch-osgi-bundle-properties">
		<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch.configuration.ElasticsearchConfiguration.config">operationMode=&quot;REMOTE&quot;
logExceptionsOnly=&quot;false&quot;</echo>
	</target>

	<target name="configure-shield-osgi-bundle-properties">
		<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch.shield.configuration.ShieldConfiguration.config">password=&quot;liferay&quot;
requiresAuthentication=&quot;true&quot;
requiresSSL=&quot;true&quot;
sslKeystorePath=&quot;${elastic.shield.ca.dir}/es-ssl.keystore.jks&quot;
username=&quot;liferay&quot;</echo>
	</target>

	<target name="start-elasticsearch">
		<unzip-elasticsearch />

		<prepare-elasticsearch />

		<get-testcase-property property.name="elastic.kibana.enabled" />

		<if>
			<equals arg1="${elastic.kibana.enabled}" arg2="true" />
			<then>
				<prepare-marvel-agent />
			</then>
		</if>

		<replace file="${elasticsearch.dir}/config/elasticsearch.yml">
			<replacetoken><![CDATA[# cluster.name: my-application]]></replacetoken>
			<replacevalue><![CDATA[cluster.name: LiferayElasticsearchCluster]]></replacevalue>
		</replace>

		<get-testcase-property property.name="elasticsearch.single.shard.enabled" />

		<if>
			<equals arg1="${elasticsearch.single.shard.enabled}" arg2="true" />
			<then>
				<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">index.number_of_shards: 1${line.separator}</echo>
			</then>
		</if>

		<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">action.auto_create_index: .marvel-*,.security</echo>

		<antcall target="configure-elasticsearch-osgi-bundle-properties" />

		<get-testcase-property property.name="elastic.shield.enabled" />

		<if>
			<equals arg1="${elastic.shield.enabled}" arg2="true" />
			<then>
				<antcall target="configure-shield-osgi-bundle-properties" />

				<prepare-shield />

				<configure-shield />
			</then>
		</if>

		<get-testcase-property property.name="remote.elasticsearch.cluster.size" />

		<var name="elasticsearch.node.count" value="1" />

		<if>
			<isset property="remote.elasticsearch.cluster.size" />
			<then>
				<var name="elasticsearch.node.count" value="${remote.elasticsearch.cluster.size}" />
			</then>
		</if>

		<var name="elasticsearch.pid.file.count" value="0" />

		<antelope:repeat count="${elasticsearch.node.count}">
			<math
				datatype="int"
				operand1="${elasticsearch.pid.file.count}"
				operand2="1"
				operation="+"
				result="elasticsearch.pid.file.count"
			/>

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="ES_HEAP_SIZE=512m ./elasticsearch -Des.insecure.allow.root=true -d -p pid-elasticsearch-${elasticsearch.pid.file.count}" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="elasticsearch -d -p pid-elasticsearch-${elasticsearch.pid.file.count}" />
						</exec>
					</then>
				</elseif>
			</if>
		</antelope:repeat>

		<if>
			<equals arg1="${elastic.shield.enabled}" arg2="true" />
			<then>
				<sleep seconds="30" />

				<exec executable="curl" outputproperty="curl.output">
					<arg value="https://localhost:9200" />
					<arg value="-ku" />
					<arg value="liferay:liferay" />
				</exec>

				<echo>${curl.output}</echo>

				<if>
					<contains string="${curl.output}" substring="You Know, for Search" />
					<then>
						<echo>Elasticshield successfully started with Shield.</echo>
					</then>
					<else>
						<fail>Elasticsearch failed to start with Shield.</fail>
					</else>
				</if>
			</then>
			<else>
				<waitfor maxwait="20" maxwaitunit="second" timeoutproperty="elasticsearch.server.not.started">
					<http url="http://localhost:9200/" />
				</waitfor>

				<fail if="elasticsearch.server.not.started" message="Elasticsearch server failed to initialize." />
			</else>
		</if>
	</target>

	<target name="start-kibana">
		<unzip-kibana />

		<prepare-kibana />

		<replace file="${elastic.kibana.dir}/config/kibana.yml">
			<replacetoken><![CDATA[# server.basePath: ""]]></replacetoken>
			<replacevalue><![CDATA[server.basePath: "/o/portal-search-elasticsearch-marvel-web/marvel-proxy"]]></replacevalue>
		</replace>

		<replace
			file="${elastic.kibana.dir}/config/kibana.yml"
			token="# pid.file: /var/run/kibana.pid"
			value="pid_file: ${elastic.kibana.dir}/bin/pid-kibana"
		/>

		<get-testcase-property property.name="elastic.shield.enabled" />

		<if>
			<equals arg1="${elastic.shield.enabled}" arg2="true" />
			<then>
				<replace file="${elastic.kibana.dir}/config/kibana.yml">
					<replacetoken><![CDATA[# elasticsearch.username: "user"
# elasticsearch.password: "pass"]]></replacetoken>
					<replacevalue><![CDATA[elasticsearch.username: "liferay"
elasticsearch.password: "liferay"]]></replacevalue>
				</replace>

				<replace file="${elastic.kibana.dir}/config/kibana.yml">
					<replacetoken><![CDATA[# elasticsearch.url: "http://localhost:9200"]]></replacetoken>
					<replacevalue><![CDATA[elasticsearch.url: "https://localhost:9200"]]></replacevalue>
				</replace>

				<replace file="${elastic.kibana.dir}/config/kibana.yml" token="# elasticsearch.ssl.ca: /path/to/your/CA.pem" value="elasticsearch.ssl.ca: ${elastic.shield.ca.dir}/certs/cacert.pem" />
			</then>
		</if>

		<if>
			<os family="unix" />
			<then>
				<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="./kibana &gt; kibana.log 2&gt;&amp;1 &amp;" />
				</exec>
			</then>
			<elseif>
				<os family="windows" />
				<then>
					<exec dir="${elastic.kibana.dir}/bin" executable="cmd">
						<arg value="/c" />
						<arg value="kibana" />
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="stop-elasticsearch">
		<get-testcase-property property.name="remote.elasticsearch.cluster.size" />

		<var name="elasticsearch.node.count" value="1" />

		<if>
			<isset property="remote.elasticsearch.cluster.size" />
			<then>
				<var name="elasticsearch.node.count" value="${remote.elasticsearch.cluster.size}" />
			</then>
		</if>

		<var name="elasticsearch.pid.file.count" value="0" />

		<antelope:repeat count="${elasticsearch.node.count}">
			<math
				datatype="int"
				operand1="${elasticsearch.pid.file.count}"
				operand2="1"
				operation="+"
				result="elasticsearch.pid.file.count"
			/>

			<if>
				<os family="unix" />
				<then>
					<loadfile property="pid-elasticsearch" srcFile="${elasticsearch.dir}/bin/pid-elasticsearch-${elasticsearch.pid.file.count}">
						<filterchain>
							<linecontainsregexp>
								<regexp pattern="[0-9]*" />
							</linecontainsregexp>
						</filterchain>
					</loadfile>

					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="kill ${pid-elasticsearch}" />
					</exec>

					<var name="pid-elasticsearch" unset="true" />
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="for /f %x in (pid-elasticsearch-${elasticsearch.pid.file.count}) do taskkill /f /pid %x" />
						</exec>
					</then>
				</elseif>
			</if>
		</antelope:repeat>
	</target>

	<target name="stop-kibana">
		<if>
			<os family="unix" />
			<then>
				<loadfile property="pid-kibana" srcFile="${elastic.kibana.dir}/bin/pid-kibana">
					<filterchain>
						<linecontainsregexp>
							<regexp pattern="[0-9]*" />
						</linecontainsregexp>
					</filterchain>
				</loadfile>

				<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="kill ${pid-kibana}" />
				</exec>
			</then>
		</if>
	</target>
</project>