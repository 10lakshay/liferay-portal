@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdmin.importCollectionFromDependenciesFolder(
			collectionZipFile = "fragment-collection.zip"
		);

		DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test"
			);

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			MyAccount.openMyAccountAdmin();

			User.deleteProfileImage();

			Button.click(button = "Save");

			User.tearDownCP();
		}
	}

	@description = "This is a test for LPS-86550. Users should be able to map author name and author profile image to a fragment editable field in a display page."
	@priority = "5"
	test MapWebContentAuthor {
		// Add a display page with author name and profile fields mapped.

		DisplayPagesAdmin.add(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text"
		);

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Image"
		);

		PageEditorMapping.selectAssetType(
			assetType = "Web Content Article",
			subType = "Basic Web Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Rich Text",
			id = "rich-text",
			itemName = "Author Name"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Image",
			id = "image",
			itemName = "Author Profile Image"
		);

		Button.clickPublish();

		// Add profile image for the super admin user.

		MyAccount.openMyAccountAdmin();

		User.changeProfileImage(imageName = "marketplace_icon.png");

		Button.click(button = "Save");

		// Add a web content article as the super admin user.

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Pages"
		);

		// Assert super admin name and profile image appear.

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Test Test",
			key_fragmentClass = "rich-text",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "",
			key_fragmentClass = "image",
			key_position = "2"
		);

		SikuliAssertElementPresent(locator1 = "Fragment#MARKETPLACE_ICON_PNG");
	}

	@description = "This is a test for LPS-86550. Users should be able to map last editor name and author profile image to a fragment editable field in a display page."
	@priority = "5"
	test MapWebContentLastEditor {
		// Add a display page with last editor name and profile fields mapped.

		DisplayPagesAdmin.add(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text"
		);

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Image"
		);

		PageEditorMapping.selectAssetType(
			assetType = "Web Content Article",
			subType = "Basic Web Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Rich Text",
			id = "rich-text",
			itemName = "Last Editor Name"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Image",
			id = "image",
			itemName = "Last Editor Profile Image"
		);

		Button.clickPublish();

		// Add profile image for the super admin user.

		MyAccount.openMyAccountAdmin();

		User.changeProfileImage(imageName = "marketplace_icon.png");

		Button.click(button = "Save");

		// Add a second user with permission to edit web content articles.

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.assignRegularRoleCP(roleTitle = "Administrator", userScreenName = "usersn");

		// Add profile image for the second user.

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		User.changeProfileImage(imageName = "Document_4.jpg");

		Button.click(button = "Save");

		// Add a web content article as the super admin user.

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Pages"
		);

		// Assert super admin name and profile image appear.

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Test Test",
			key_fragmentClass = "rich-text",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "",
			key_fragmentClass = "image",
			key_position = "2"
		);

		// Edit the web content article as the second user.

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "Userfn Userln"
		);

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

		WebContent.editCP(
			webContentContentEdit = "Webcontent Content Edit",
			webContentTitleEdit = "Webcontent Title Edit"
		);

		// Assert super admin name and profile image appear.

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Userfn Userln",
			key_fragmentClass = "rich-text",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "",
			key_fragmentClass = "image",
			key_position = "2"
		);

		SikuliAssertElementPresent(locator1 = "Fragment#DOCUMENT_4_PNG");
	}

	@description = "Add a fragment with multiple editable fields in it."
	@priority = "4"
	test ViewDisplayPageWithComplexRichTextFragments {
		DisplayPagesAdmin.add(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Multiple Editables"
		);

		PageEditorMapping.selectAssetType(
			assetType = "Web Content Article",
			subType = "Basic Web Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Multiple Editables",
			id = "test1",
			itemName = "Title"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Multiple Editables",
			id = "test2",
			itemName = "Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Multiple Editables",
			id = "test3",
			itemName = "Tags"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Multiple Editables",
			id = "test4",
			itemName = "Publish Date"
		);

		Button.clickPublish();

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.addArticleCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

		WebContent.addWithTagCP(tagNameList = "tag1,tag2,tag3");

		WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Pages"
		);

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.addPublicPage(pageName = "Site Page Name");

		Navigator.gotoSitePage(pageName = "Site Page Name", siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		DisplayPagesAdmin.viewPGViaAP(
			contentList = "Webcontent Title,Webcontent Content,tag1,tag2,tag3",
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);
	}
}