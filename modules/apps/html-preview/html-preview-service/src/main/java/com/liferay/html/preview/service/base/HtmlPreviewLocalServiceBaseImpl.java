/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.html.preview.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.html.preview.model.HtmlPreview;
import com.liferay.html.preview.service.HtmlPreviewLocalService;
import com.liferay.html.preview.service.persistence.HtmlPreviewPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the html preview local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.html.preview.service.impl.HtmlPreviewLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.html.preview.service.impl.HtmlPreviewLocalServiceImpl
 * @see com.liferay.html.preview.service.HtmlPreviewLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class HtmlPreviewLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements HtmlPreviewLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.html.preview.service.HtmlPreviewLocalServiceUtil} to access the html preview local service.
	 */

	/**
	 * Adds the html preview to the database. Also notifies the appropriate model listeners.
	 *
	 * @param htmlPreview the html preview
	 * @return the html preview that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HtmlPreview addHtmlPreview(HtmlPreview htmlPreview) {
		htmlPreview.setNew(true);

		return htmlPreviewPersistence.update(htmlPreview);
	}

	/**
	 * Creates a new html preview with the primary key. Does not add the html preview to the database.
	 *
	 * @param htmlPreviewId the primary key for the new html preview
	 * @return the new html preview
	 */
	@Override
	public HtmlPreview createHtmlPreview(long htmlPreviewId) {
		return htmlPreviewPersistence.create(htmlPreviewId);
	}

	/**
	 * Deletes the html preview with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param htmlPreviewId the primary key of the html preview
	 * @return the html preview that was removed
	 * @throws PortalException if a html preview with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HtmlPreview deleteHtmlPreview(long htmlPreviewId)
		throws PortalException {
		return htmlPreviewPersistence.remove(htmlPreviewId);
	}

	/**
	 * Deletes the html preview from the database. Also notifies the appropriate model listeners.
	 *
	 * @param htmlPreview the html preview
	 * @return the html preview that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HtmlPreview deleteHtmlPreview(HtmlPreview htmlPreview) {
		return htmlPreviewPersistence.remove(htmlPreview);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(HtmlPreview.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return htmlPreviewPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.html.preview.model.impl.HtmlPreviewModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return htmlPreviewPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.html.preview.model.impl.HtmlPreviewModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return htmlPreviewPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return htmlPreviewPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return htmlPreviewPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public HtmlPreview fetchHtmlPreview(long htmlPreviewId) {
		return htmlPreviewPersistence.fetchByPrimaryKey(htmlPreviewId);
	}

	/**
	 * Returns the html preview with the primary key.
	 *
	 * @param htmlPreviewId the primary key of the html preview
	 * @return the html preview
	 * @throws PortalException if a html preview with the primary key could not be found
	 */
	@Override
	public HtmlPreview getHtmlPreview(long htmlPreviewId)
		throws PortalException {
		return htmlPreviewPersistence.findByPrimaryKey(htmlPreviewId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(htmlPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HtmlPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("htmlPreviewId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(htmlPreviewLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(HtmlPreview.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"htmlPreviewId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(htmlPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HtmlPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("htmlPreviewId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return htmlPreviewLocalService.deleteHtmlPreview((HtmlPreview)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return htmlPreviewPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the html previews.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.html.preview.model.impl.HtmlPreviewModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of html previews
	 * @param end the upper bound of the range of html previews (not inclusive)
	 * @return the range of html previews
	 */
	@Override
	public List<HtmlPreview> getHtmlPreviews(int start, int end) {
		return htmlPreviewPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of html previews.
	 *
	 * @return the number of html previews
	 */
	@Override
	public int getHtmlPreviewsCount() {
		return htmlPreviewPersistence.countAll();
	}

	/**
	 * Updates the html preview in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param htmlPreview the html preview
	 * @return the html preview that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HtmlPreview updateHtmlPreview(HtmlPreview htmlPreview) {
		return htmlPreviewPersistence.update(htmlPreview);
	}

	/**
	 * Returns the html preview local service.
	 *
	 * @return the html preview local service
	 */
	public HtmlPreviewLocalService getHtmlPreviewLocalService() {
		return htmlPreviewLocalService;
	}

	/**
	 * Sets the html preview local service.
	 *
	 * @param htmlPreviewLocalService the html preview local service
	 */
	public void setHtmlPreviewLocalService(
		HtmlPreviewLocalService htmlPreviewLocalService) {
		this.htmlPreviewLocalService = htmlPreviewLocalService;
	}

	/**
	 * Returns the html preview persistence.
	 *
	 * @return the html preview persistence
	 */
	public HtmlPreviewPersistence getHtmlPreviewPersistence() {
		return htmlPreviewPersistence;
	}

	/**
	 * Sets the html preview persistence.
	 *
	 * @param htmlPreviewPersistence the html preview persistence
	 */
	public void setHtmlPreviewPersistence(
		HtmlPreviewPersistence htmlPreviewPersistence) {
		this.htmlPreviewPersistence = htmlPreviewPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.html.preview.model.HtmlPreview",
			htmlPreviewLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.html.preview.model.HtmlPreview");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return HtmlPreviewLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return HtmlPreview.class;
	}

	protected String getModelClassName() {
		return HtmlPreview.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = htmlPreviewPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = HtmlPreviewLocalService.class)
	protected HtmlPreviewLocalService htmlPreviewLocalService;
	@BeanReference(type = HtmlPreviewPersistence.class)
	protected HtmlPreviewPersistence htmlPreviewPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}